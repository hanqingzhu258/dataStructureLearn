//
// Description: BST（二叉排序树、二叉搜索（查找）树）是满足以下性质的二叉树：
//                 （1）若它的左子树非空，则左子树上所有记录的值均小于根记录的值；
//                 （2）若它的右子树非空，则右子树上所有记录的值均大于根记录的值；
//                 （3）左、右子树本身又各是一颗二叉排序树。
// Created by hanqing zhu on 2018/11/29.
//

#ifndef CHAPTER9_UNIT3_H
#define CHAPTER9_UNIT3_H

#include "main.h"

/*------------------------------------------------------
 *
 * 在二叉排序树中插入一个新纪录
 *
 * author： hanqing zhu 2018/11/29 15:53
 * -----------------------------------------------------*/
int insertBST(BSTNode **r,KeyType k);

/*------------------------------------------------------
 *
 * 从关键字数组A[0..n-1]生成二叉排序树
 *
 * author： hanqing zhu 2018/11/29 16:12
 * -----------------------------------------------------*/
BSTNode * createBST(KeyType A[],int n);

/*------------------------------------------------------
 *
 * 在二叉排序树上查找关键字为k的记录
 * 
 * author： hanqing zhu 2018/11/29 16:24
 * -----------------------------------------------------*/
BSTNode * searchBST(BSTNode *r,KeyType k);

/*------------------------------------------------------
 *
 * 在上述查找的基础上，返回其双亲结点的指针
 * 
 * author： hanqing zhu 2018/11/29 16:33
 * -----------------------------------------------------*/
BSTNode * searchBST1(BSTNode *r,KeyType k,BSTNode *f1,BSTNode **f);

/*------------------------------------------------------
 *
 * 对于给定的二叉排序树中的结点*p，找出其左子树中的最大结点和
 * 右子树中的最小结点
 * 
 * author： hanqing zhu 2018/11/30 16:00
 * -----------------------------------------------------*/
void maxMinNode(BSTNode *p);
//返回一颗二叉排序树中最大结点关键字
KeyType maxNode(BSTNode *p);
//返回一颗二叉排序树中的最小结点关键字
KeyType minNode(BSTNode *p);

/*------------------------------------------------------
 *
 * 二叉排序树的删除
 *
 * author： hanqing zhu 2018/11/30 16:17
 * -----------------------------------------------------*/
int deleteBST(BSTNode **r,KeyType k);
void deleteNode(BSTNode **p);
void deleteNode1(BSTNode **p,BSTNode **r);


/*------------------------------------------------------
 *
 * B-树又称多路平衡查找树，是一种组织和维护外存文件系统非常有效
 * 的数据结构。
 *
 * B-树所有结点的孩子结点最大值成为B-树的阶，通常用m表示，从查找
 * 效率考虑，要求m>=3。
 *
 * 一棵m阶B-树或者是一个空树，是满足下列要求的m叉树：
 * （1）树中每个结点至多有m个孩子结点（即至多有m-1个关键字）。
 * （2）除根结点外，其它结点至少有[m/2]个孩子结点（即至少有
 * [m/2]-1=【(m-1)/2】个关键字）。
 * （3）若根结点不是叶子结点，则根结点至少有两个孩子结点。
 * （4）每个结点结构为：[n|p0|k1|p1|k1|p2|...|kn|pn]
 * 其中，n为该结点中的关键字个数，除根结点外，其它所有结点的n大于
 * 等于([m/2]-1)，且小于(m-1)；ki(1<=k<=n)为该结点的关键字且满
 * 足 ki<k(i+1)；pi(0<=i<=n)为该结点的孩子结点指针且满足pi结点
 * 上的关键字大于等于ki且小于k(i+1)，pn结点上的关键字大于kn。
 * （5）所有叶子结点都在同一层上，即B-树是所有结点的平衡因子均等于
 * 0的多路查找树。
 * 
 * author： hanqing zhu 2018/12/2 16:43
 * -----------------------------------------------------*/

//这里的，m，max和min三个变量均定义为全局变量
extern int m,min,max;

/*------------------------------------------------------
 *
 * B-树的查找（多路查询）
 *
 * author： hanqing zhu 2018/12/2 16:58
 * -----------------------------------------------------*/
Result searchBTree(BTNode *t,KeyType k);
int search_BTNode(BTNode *p,KeyType k);



#endif //CHAPTER9_UNIT3_H
